{
  "name": "commandful",
  "description": "reflects command line interfaces from resourceful resources",
  "author": {
    "name": "Nodejitsu Inc.",
    "email": "info@nodejitsu.com"
  },
  "maintainers": [
    {
      "name": "Marak Squires",
      "email": "marak@nodejitsu.com"
    }
  ],
  "version": "0.2.0",
  "main": "./lib/commandful",
  "dependencies": {
    "director": "*",
    "resourceful": "0.3.x",
    "utile": "0.1.x",
    "winston": "*",
    "prompt": "~0.2.6",
    "colors": "~0.6.0-1",
    "cliff": "~0.1.8",
    "optimist": "~0.3.4"
  },
  "devDependencies": {
    "vows": "0.6.x",
    "flatiron": "0.2.x"
  },
  "bundleDependencies": [
    "resourceful"
  ],
  "optionalDependencies": {},
  "engines": {
    "node": "0.6.x || 0.8.x"
  },
  "scripts": {
    "test": "vows --spec --isolate"
  },
  "readme": "# commandful\n\nReflects [Director](http://github.com/flatiron/director) CLI ( [Command Line Interfaces](http://en.wikipedia.org/wiki/Command-line_interface) ) Routers from [resourceful](http://github.com/flatiron/resourceful) resources. Can be used as a stand-alone module or as a [Flatiron](http://github.com/flatiron/) plugin.\n\n# Explanation\n\nThe commandful project removes the process of writing boilerplate CLI code for interacting with  [resourceful](http://github.com/flatiron/resourceful) resources. commandful uses <a href=\"http://en.wikipedia.org/wiki/Reflection_(computer_programming)\">reflection</a> to reflect a [Director](http://github.com/flatiron/director) CLI router that maps all routes needed to perform basic [CRUD](http://en.wikipedia.org/wiki/Create,_read,_update_and_delete) operations with [resourceful](http://github.com/flatiron/resourceful) resources. commandful also has the ability to expose additional arbitrary <a href=\"#remote\">remote resource methods</a>.\n\nThrough the removal of this boilerplate code, commandful creates a robust, standardized, and re-usable CLI experience for any [resourceful](http://github.com/flatiron/resourceful) resource.\n\n# Installation\n\n     npm install commandful\n\n<img src=\"https://raw.github.com/flatiron/commandful/master/assets/root.png\"></img>\n\n## See Also:\n\n- [cli-config](http://github.com/flatiron/cli-config) Flatiron plugin for `config set` and `config get` commands\n\n# Usage\n\n## Define resource(s)\n\n```js\n\nvar resourceful = require('resourceful'),\n    Creature    = resourceful.define('creature');\n\nCreature.property('type', String, { default: \"dragon\" });\nCreature.property('life', Number, { default: 10 });\n\n```\n\n*[additional API documentation for defining resources](http://github.com/flatiron/resourceful)*\n\n## As a Flatiron Plugin\n\nTo use commandful as a <a href=\"http://github.com/flatiron/flatiron\">Flatiron</a> plugin you will have to:\n\n - Define resource(s) in your Flatiron app\n - Use the Flatiron `cli` plugin\n - Run the app from the command line!\n\nHere is a code example of using commandful as a Flatiron plugin: <a href=\"https://github.com/flatiron/commandful/blob/master/examples/app.js\">https://github.com/flatiron/commandful/blob/master/examples/app.js</a>\n\n## As a stand-alone CLI\n\nTo use commandful as a stand-alone server you will have to:\n\n - Define resource(s)\n - Create a new cli router based on the resource(s) using `commandful.createRouter`\n\nHere is a code example of using commandful as a stand-alone server: <a href=\"https://github.com/flatiron/commandful/blob/master/examples/simple.js\">https://github.com/flatiron/commandful/blob/master/examples/simple.js</a>\n\n## Core CLI Mappings\n\nTODO:\n\n  By default, `commandful` will map all `Resourceful` methods in the following signature:\n\n```bash\n<resource> <action>\n```\n\n**Example:**\n\n```bash\nnode bin/simple creature create\n```\n<img src=\"https://raw.github.com/flatiron/commandful/master/assets/create.png\"></img>\n\n```bash\nnode bin/simple creature show\n```\n<img src=\"https://raw.github.com/flatiron/commandful/master/assets/show.png\"></img>\n\n```bash\nnode bin/simple creature edit\n```\n<img src=\"https://raw.github.com/flatiron/commandful/master/assets/edit.png\"></img>\n\n<a name\"remote\"></a>\n## Exposing Arbitrary Resource Methods\n\nIn many cases, you'll want to expose additional methods on a Resource on the CLI outside of the included CRUD operations: `create`, `list`, `get`, `update`, `destroy`.\n\ncommandful has built in support for easily exposing arbitrary remote resource methods.\n\nConsider the example of a `Creature`. We've already defined all the commandful CRUD events, but a Creature also needs to eat! \n\nSimply create a new method on the `Creature` resource called `feed`.\n\n```js\nCreature.feed = function (_id, options, callback) {\n  callback(null, 'I have been fed');\n}\n```\nThis `feed` method is consider private by default, in that it will not be exposed to the web unless it's set to a `remote` function. To set a resource method to remote, simply:\n\n```js\nCreature.feed.remote = true\n```\n\nIt's easy as that! By setting the `feed` method to remote, the following events will exist in the CLI.\n\n```bash\nnode bin/simple creature feed\n```\n\n## CLI Customization\n\nCommandful provides access to a `Director.router` object. This router is created by the heavily used [Director](github.com/flatiron/director) library.\n\nIf you need to override a generated route, or create an ad-hoc route, or make any customization, the API is *exactly* the same as the Director API.\n\n**customize a reflected router interface:**\n\n```js\napp.router.on('foo', function() {\n  console.log('custom command');\n});\n```\n\nLike most of Flatiron's reflection libraries, [commandful](http://github.com/flatiron/commandful) is built to solve 90% of use-cases. If you hit a case where commandful is causing a problem, you can simply drop into `Director`. \n\nReflection is *highly* encouraged, but most definitely **optional**.\n\n## Resource Security\n\nThere are several ways to provide security and authorization for accessing resource methods exposed with commandful. The recommended pattern for authorization is to use resourceful's ability for `before` and `after` hooks. In these hooks, you can add additional business logic to restrict access to the resource's methods. \n\n**TL;DR; For security and authorization, you should use resourceful's `before` and `after` hooks.**\n\n# Tests\n\nTODO\n\n     npm test\n\n# TODO\n\n - Add ability for relational resources\n - Add Tests\n - Add better support for connecting API clients to resources ( for work with remote API servers )\n - Add better error handling ( Resourceful should return more generic errors, looks like couchdb response is being piped in )",
  "readmeFilename": "README.md",
  "_id": "commandful@0.2.0",
  "dist": {
    "shasum": "9734737e09dd7d366bca2d397f4661114e7e9115"
  },
  "_resolved": "git://github.com/flatiron/commandful.git#962e19c27a49ae522d53f52a194a9f0a339d5486",
  "_from": "commandful@git://github.com/flatiron/commandful.git"
}
