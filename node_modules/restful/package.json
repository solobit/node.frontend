{
  "name": "restful",
  "description": "Restful routing using resourceful and director.",
  "author": {
    "name": "Nodejitsu Inc.",
    "email": "info@nodejitsu.com"
  },
  "contributors": [
    {
      "name": "Marak Squires",
      "email": "marak@nodejitsu.com"
    },
    {
      "name": "Charlie Robbins",
      "email": "charlie@nodejitsu.com"
    }
  ],
  "version": "0.2.2",
  "main": "./lib/restful",
  "peerDependencies": {
    "director": "1.1.x",
    "resourceful": "0.2.x"
  },
  "dependencies": {
    "director": "1.1.x",
    "director-explorer": "*",
    "resourceful": "0.2.x",
    "utile": "0.1.x"
  },
  "devDependencies": {
    "vows": "0.6.x",
    "api-easy": "0.3.x"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "0.6.x || 0.8.x"
  },
  "scripts": {
    "test": "vows --spec --isolate",
    "start": "node examples/server.js"
  },
  "readme": "# Restful\n\n[![Build Status](https://secure.travis-ci.org/flatiron/restful.png)](http://travis-ci.org/flatiron/restful)\n\nCreates [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer) [Director](http://github.com/flatiron/director) routers for [resourceful](http://github.com/flatiron/resourceful) models. Can be used as a stand-alone module or as a [Flatiron](http://github.com/flatiron/) plugin.\n\n# Installation\n\n     npm install restful\n\n# Usage\n\n``` js\n  var http        = require('http'),\n      restful     = require('../lib/restful'),\n      resourceful = require('resourceful');\n\n  //\n  // Create a new Creature resource using the Resourceful library\n  //\n  var Creature = resourceful.define('creature', function () {\n    //\n    // Specify a storage engine\n    //\n    this.use('memory');\n    //\n    // Specify some properties with validation\n    //\n    this.string('type');\n    this.string('description');\n  });\n\n  //\n  // Create a new Director routing map based on \"Creature\" resource\n  //\n  var router = restful.createRouter(Creature);\n\n  //\n  // Setup a very simple HTTP server to serve our routing map!\n  //\n  var server = http.createServer(function (req, res) {\n    req.chunks = [];\n    req.on('data', function (chunk) {\n      req.chunks.push(chunk.toString());\n    });\n\n    // \n    //  Router will now dispatch all RESTFul urls for the Creature resource\n    // \n    //    POST    /creatures    => Creature.create()\n    //    GET     /creatures    => Creature.all()\n    //    GET     /creatures/1  => Creature.show()\n    //    PUT     /creatures/1  => Creature.update()\n    //    DELETE  /creatures/1  => Creature.destroy()\n    // \n    //  Since not all HTTP clients support PUT and DELETE verbs ( such as forms in web browsers ),\n    //  restful will also map the following browser friendly routes:\n    // \n    //  If you prefer to not use this option, set { strict: true }\n    // \n    //    POST  /creatures/1/update  => Creature.update()\n    //    POST  /creatures/1/destroy => Creature.destroy()\n    // \n    // You might also want to consider using a rails-like approach which uses\n    // the convention of a reserved <form> input field called \"_method\" which \n    // contains either \"PUT\" or \"DELETE\"\n    // \n    //   see: https://github.com/senchalabs/connect/blob/master/lib/middleware/methodOverride.js\n    // \n    router.dispatch(req, res, function (err) {\n      if (err) {\n        res.writeHead(404);\n        res.end();\n      }\n      console.log('Served ' + req.url);\n    });\n  });\n\n  server.listen(8000);\n```\n\n# Tests\n\n     npm test\n\n# TODO\n\n - Full `resourceful` property type support ( numeric, boolean, array, object )\n - Full `resourceful` nested property schema support\n - Implement and document browser support\n - Improve Tests\n - Add better error support via `errs` library\n",
  "readmeFilename": "README.md",
  "_id": "restful@0.2.2",
  "_from": "restful@"
}
